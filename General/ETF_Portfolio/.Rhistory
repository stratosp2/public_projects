# Fama-French factor exposure constraint
exp_constr <- factor_exposure_constraint(assets=Ticks, B=betas, lower=lower, upper=upper)
#' Objective to minimize variance.
var_obj <- portfolio_risk_objective(name="var")
#std_obj <- portfolio_risk_objective(name="std")
pl_constr <- position_limit_constraint(assets=pspec$assets, min_pos=4)
#' Objective to maximize return.
ret_obj <- return_objective(name="mean")
#' Objective to minimize expected tail loss ETL.
etl_obj <- portfolio_risk_objective(name="ETL")
optb <- optimize.portfolio(R=etfs, portfolio=pspec,
constraints=list(lev_constr,lo_constr, exp_constr,pl_constr),
objectives=list(var_obj, ret_obj),  maxSR =T, maxSTARR=TRUE,#this we can decide to include or not.
optimize_method="DEoptim", search_size = 30000, maxiter=100000)
#optimal weights from optb
opt_weights <- round(optb$weights,2)
print(opt_weights)
pspec$assets
print(opt_weights)
lo_constr <- box_constraint(assets=pspec$assets, min=c(0.05, 0.05, 0.05, 0.1, 0.2, 0.2), max= c(0.1,0.15, 0.1, 0.25, 0.4, 0.4))
# Fama-French factor exposure constraint
exp_constr <- factor_exposure_constraint(assets=Ticks, B=betas, lower=lower, upper=upper)
#' Objective to minimize variance.
var_obj <- portfolio_risk_objective(name="var")
#std_obj <- portfolio_risk_objective(name="std")
pl_constr <- position_limit_constraint(assets=pspec$assets, min_pos=4)
#' Objective to maximize return.
ret_obj <- return_objective(name="mean")
#' Objective to minimize expected tail loss ETL.
etl_obj <- portfolio_risk_objective(name="ETL")
optb <- optimize.portfolio(R=etfs, portfolio=pspec,
constraints=list(lev_constr,lo_constr, exp_constr,pl_constr),
objectives=list(var_obj, ret_obj),  maxSR =T, maxSTARR=TRUE,#this we can decide to include or not.
optimize_method="DEoptim", search_size = 30000, maxiter=100000)
#optimal weights from optb
opt_weights <- round(optb$weights,2)
print(opt_weights)
#manually add weights
#etf_weights <- c(0.0281, 0.144, 0.288, 0.111, 0.428)
#etf_weights <- c(0.085, 0.112, 0.11, 0.40, 0.295)
#etf_value_weights <- c(0.085, 0.11, 0.40, 0.295)
etf_weights <- c(0.05, 0.08, 0.05, 0.22, 0.3, 0.3)
sum(etf_weights)
#create the portfolio returns based on optimal weights
etf_port <- reclass(coredata(etfs)%*%opt_weights, match.to = etfs)
colnames(etf_port) <- "opt_returns"
df_etf <- etf_port%>%fortify.zoo %>%data.frame()
colnames(df_etf) <- c("Date","opt_returns")
#create the portfolio returns based on manual weights
etf_port_pre <- reclass(coredata(etfs)%*%etf_weights, match.to = etfs)
colnames(etf_port_pre) <- "man_returns"
#manually weighted df returns
df_etf_stand <- etf_port_pre%>%fortify.zoo %>%data.frame()
colnames(df_etf_stand) <- c("Date","man_returns")
# merging all returns (optimized, manual) and etfs with fama frenc factors for portfolio regression
port_ret_factors <- merge(x=all_etfs_joined, y=c(df_etf, df_etf_stand), on = 'Date', all.x= F)
#port_ret_factors
# check some performance metrics
charts.PerformanceSummary(merge(etf_port,etf_port_pre,SPY))
charts.RollingPerformance(merge(etf_port,etf_port_pre,SPY ),  legend.loc = "topleft")
# run a regression for the 3 factors on either the optimized weights returns or manual weights returns
us_factor_model <- lm(man_returns-us_RF ~ `us_Mkt-RF` + us_SMB + us_HML + us_CMA + us_RMW, data = port_ret_factors)
summary(us_factor_model)
# run a regression for the 3 factors on either the optimized weights returns or manual weights returns
us_factor_model <- lm(man_returns-us_RF ~ `us_Mkt-RF` + us_SMB + us_HML, data = port_ret_factors)
summary(us_factor_model)
eu_factor_model <- lm(man_returns-eu_RF ~ `eu_Mkt-RF` + eu_SMB + eu_HML, data = port_ret_factors)
summary(eu_factor_model)
eu_factor_model <- lm(port$ZPRX.DE-eu_RF ~ `eu_Mkt-RF` + eu_SMB + eu_HML, data = port_ret_factors)
summary(eu_factor_model)
etf_port
port_ret_factors
eu_factor_model <- lm(ZPRX.DE-eu_RF ~ `eu_Mkt-RF` + eu_SMB + eu_HML, data = port_ret_factors)
summary(eu_factor_model)
eu_factor_model <- lm(ZPRX.DE-eu_RF ~ `eu_Mkt-RF` + eu_SMB + eu_HML + eu_CMA, data = port_ret_factors)
summary(eu_factor_model)
eu_factor_model <- lm(ZPRX.DE-eu_RF ~ `eu_Mkt-RF` + eu_SMB + eu_HML + eu_CMA + eu_RMW, data = port_ret_factors)
summary(eu_factor_model)
which_port = etf_port_pre
colnames(which_port) <- "returns"
mn <- mean(which_port)
std <- sd(which_port)
hist(which_port, breaks = 100)
ks.test(which_port, "pnorm")
#create a normal distribution from these
nd <- rnorm(10000, mn, std)
hist(nd, breaks = 300,
main = paste0("Histogram of portfolio returns, mean: ", round(mn, 4)*100,"%"),
xlab = "Monthly Returns",
col = "magenta"
)
#generate future expectations. set.seed(0) reproduces the same results, comment out for re-creating new paths.
set.seed(0)
nmonths <- 24
returns <- as.numeric(which_port$returns)
#sample to be Montme carlo. mean(paths) -> mean(returns) as n>>1. See documentation ?sample()
paths <- replicate(n=10000,
expr = sample(returns, nmonths, replace = T)) # (.,x,.) x is the size of the sample and future
# pass the cumprod function for all n paths
paths <- apply(paths, 2, function(column) cumprod(1 + column)-1)
#prepare
paths <- data.table(paths)
paths$months <- 1:nrow(paths)
paths <- melt(paths, id.vars = "months")
MC_mean <- round(mean(paths$value),3)
MC_sd <- round(sd(paths$value),3)
mean_end <- round(mean(paths$value[paths$months== nmonths]),4)*100
sd_end <- round(sd(paths$value[paths$months== nmonths]),4)*100
# Probability to  have negative retults
mn_nq <- round(mean(paths$value[paths$months == nmonths]<0), 4)
mn_nq
#subset for negative values to calculate the mean
negative_values <- paths$value[paths$months == nmonths & paths$value < 0]
#mean of negative cummkulative returns
avg_neg <- negative_values%>%mean()%>%round(4)*100
#get the last nmonths returns of portfolio to calculate where we are.
last_returns <- tail(which_port, nmonths)
months <- 1:nmonths
last_36_months <- data.frame(
months = months,
value = cumprod(1+last_returns)-1,
variable = "last_36_months"
)
#current cummulative return of portfolio after nmonths
current_cumulative = round(last_36_months$returns%>%tail(1),4)*100
ggplot(paths, aes(x = months, y = value, col = variable)) + geom_line() +theme_bw() + theme(legend.position = "none") +
labs(x = "Months", y = "Cummulative returns",
title = paste("MC simulation for portfolio, end mean:",
mean_end, "%. P for negative cummulative returns:",
mn_nq*100,"% with avg loss:", abs(avg_neg),"%.","Bold line port returns:",current_cumulative,"%"))+
geom_line(data = last_36_months, aes(x = months, y = returns), color = "black", size = 1.2)
#geom_line(last_returns$returns)
normal <- paths$value[paths$months == nmonths]
hist(normal, prob = T, breaks = 200,
main = paste("Histogram of cummulative returns after", nmonths, "months of portfolio, mean:", mean_end, ", sd:", sd_end),
xlab = "Cummulative return",
col = "magenta")
x <- seq(min(normal), max(normal), length =100)
l <- dnorm(x, mean = mean(normal), sd = sd(normal))
sigma_m <- abline(v = mean(normal)-sd(normal), lwd =2)
sigma_p <- abline(v = mean(normal)+sd(normal), lwd =2)
lines(x,l, col = "black", lwd=2)
#mprobability to end more than 30%
mn_03 <- round(mean(paths$value[paths$months == nmonths]>=0.3),4)*100
mn_03
# Probability to have more than q cumulative returns at the end
mn_q <- round(mean(paths$value[paths$months == nmonths]>0.5), 4)*100
mn_q
which_port = etf_port_pre
colnames(which_port) <- "returns"
mn <- mean(which_port)
std <- sd(which_port)
hist(which_port, breaks = 100)
ks.test(which_port, "pnorm")
#create a normal distribution from these
nd <- rnorm(10000, mn, std)
hist(nd, breaks = 300,
main = paste0("Histogram of portfolio returns, mean: ", round(mn, 4)*100,"%"),
xlab = "Monthly Returns",
col = "magenta"
)
#generate future expectations. set.seed(0) reproduces the same results, comment out for re-creating new paths.
set.seed(0)
nmonths <- 36
returns <- as.numeric(which_port$returns)
#sample to be Montme carlo. mean(paths) -> mean(returns) as n>>1. See documentation ?sample()
paths <- replicate(n=10000,
expr = sample(returns, nmonths, replace = T)) # (.,x,.) x is the size of the sample and future
# pass the cumprod function for all n paths
paths <- apply(paths, 2, function(column) cumprod(1 + column)-1)
#prepare
paths <- data.table(paths)
paths$months <- 1:nrow(paths)
paths <- melt(paths, id.vars = "months")
MC_mean <- round(mean(paths$value),3)
MC_sd <- round(sd(paths$value),3)
mean_end <- round(mean(paths$value[paths$months== nmonths]),4)*100
sd_end <- round(sd(paths$value[paths$months== nmonths]),4)*100
# Probability to  have negative retults
mn_nq <- round(mean(paths$value[paths$months == nmonths]<0), 4)
mn_nq
#subset for negative values to calculate the mean
negative_values <- paths$value[paths$months == nmonths & paths$value < 0]
#mean of negative cummkulative returns
avg_neg <- negative_values%>%mean()%>%round(4)*100
#get the last nmonths returns of portfolio to calculate where we are.
last_returns <- tail(which_port, nmonths)
months <- 1:nmonths
last_36_months <- data.frame(
months = months,
value = cumprod(1+last_returns)-1,
variable = "last_36_months"
)
#current cummulative return of portfolio after nmonths
current_cumulative = round(last_36_months$returns%>%tail(1),4)*100
ggplot(paths, aes(x = months, y = value, col = variable)) + geom_line() +theme_bw() + theme(legend.position = "none") +
labs(x = "Months", y = "Cummulative returns",
title = paste("MC simulation for portfolio, end mean:",
mean_end, "%. P for negative cummulative returns:",
mn_nq*100,"% with avg loss:", abs(avg_neg),"%.","Bold line port returns:",current_cumulative,"%"))+
geom_line(data = last_36_months, aes(x = months, y = returns), color = "black", size = 1.2)
which_port = etf_port_pre
colnames(which_port) <- "returns"
mn <- mean(which_port)
std <- sd(which_port)
hist(which_port, breaks = 100)
ks.test(which_port, "pnorm")
#create a normal distribution from these
nd <- rnorm(10000, mn, std)
hist(nd, breaks = 300,
main = paste0("Histogram of portfolio returns, mean: ", round(mn, 4)*100,"%"),
xlab = "Monthly Returns",
col = "magenta"
)
#generate future expectations. set.seed(0) reproduces the same results, comment out for re-creating new paths.
set.seed(0)
nmonths <- 36
returns <- as.numeric(which_port$returns)
#sample to be Montme carlo. mean(paths) -> mean(returns) as n>>1. See documentation ?sample()
paths <- replicate(n=10000,
expr = sample(returns, nmonths, replace = T)) # (.,x,.) x is the size of the sample and future
# pass the cumprod function for all n paths
paths <- apply(paths, 2, function(column) cumprod(1 + column)-1)
#prepare
paths <- data.table(paths)
paths$months <- 1:nrow(paths)
paths <- melt(paths, id.vars = "months")
MC_mean <- round(mean(paths$value),3)
MC_sd <- round(sd(paths$value),3)
mean_end <- round(mean(paths$value[paths$months== nmonths]),4)*100
sd_end <- round(sd(paths$value[paths$months== nmonths]),4)*100
# Probability to  have negative retults
mn_nq <- round(mean(paths$value[paths$months == nmonths]<0), 4)
mn_nq
#subset for negative values to calculate the mean
negative_values <- paths$value[paths$months == nmonths & paths$value < 0]
#mean of negative cummkulative returns
avg_neg <- negative_values%>%mean()%>%round(4)*100
#get the last nmonths returns of portfolio to calculate where we are.
last_returns <- tail(which_port, nmonths)
months <- 1:nmonths
last_36_months <- data.frame(
months = months,
value = cumprod(1+last_returns)-1,
variable = "last_36_months"
)
#current cummulative return of portfolio after nmonths
current_cumulative = round(last_36_months$returns%>%tail(1),4)*100
ggplot(paths, aes(x = months, y = value, col = variable)) + geom_line() +theme_bw() + theme(legend.position = "none") +
labs(x = "Months", y = "Cummulative returns",
title = paste("MC simulation for portfolio, end mean:",
mean_end, "%. P for negative cummulative returns:",
mn_nq*100,"% with avg loss:", abs(avg_neg),"%.","Bold line port returns:",current_cumulative,"%"))+
geom_line(data = last_36_months, aes(x = months, y = returns), color = "black", size = 1.2)
##
## Calculate investments
##
df_inv <- which_port%>%fortify.zoo %>%data.frame()
colnames(df_inv) <- c("Date","returns")
#df_inv
total_invest = 80000
add = round(total_invest/length(df_inv$Date),2)
add
start = add
df_inv$cum_returns <- (cumprod(1+df_inv$returns)-1)%>%round(4)*100
df_inv$investments <- start
df_inv$exp_returns<- start
df_inv$lump_sum <- total_invest
df_inv$SPY <- total_invest
spy <- SPY%>%fortify.zoo()
for (i in 1:length(df_inv$Date-1)) {
df_inv[i+1, "investments"] <-  df_inv[i, "investments"]+add
df_inv[i+1, "exp_returns"] <-  (df_inv[i, "exp_returns"]+add)*(1+df_inv[i+1,"returns"])
df_inv[i+1, "lump_sum"] <- df_inv[i, "lump_sum"]*(1+df_inv[i+1,"returns"])
df_inv[i+1, "SPY"] <- df_inv[i, "SPY"]*(1+spy[i+1,"SPY"])
}
df_inv <- df_inv%>%drop_na()
avg_gain <- round(tail(df_inv$exp_returns)[6]-total_invest, 3)
ls_gain <- round(tail(df_inv$lump_sum)[6]-total_invest,3)
mkt_ls_gain <- round(tail(df_inv$SPY)[6]-total_invest,3)
investment_years <- time_length(difftime(df_inv$Date[1],df_inv$Date[length(df_inv$Date)]), "years")%>%abs()
months <- round((investment_years-round(investment_years,0))*12,2)
time_length(difftime(df_inv$Date[1],df_inv$Date[length(df_inv$Date)]), "months")%>%abs()
########
########
# Calculate returns by year and find geometric average for investement years
########
########
annual_etf_port <- data.frame(dates = df_inv$Date, monthly_returns = df_inv$returns)%>%group_by(year(dates)) %>%
summarize(annual_return = prod(1 + monthly_returns) - 1)
annual_etf_port$Returns
colnames(annual_etf_port) <- c("Year", "Returns")
ggplot(annual_etf_port, aes(Year, Returns*100, fill = Returns*100))+geom_col()+
scale_fill_gradient(low="red", high="green") +ggtitle("Yearly returns of our portfolio")+
geom_text(aes(label = round(Returns*100,2)), vjust = -0.5)
end_value = 100*prod(1+annual_etf_port$Returns)
# writing the solving function
f1 = function(x) {
100*(x^abs(investment_years)) - end_value
}
roots = uniroot.all(f1, c(0, 3))
annualised_return = round(100*(roots-1),2)
# this gives the same yearly return
#annualised_return = round((tail(df_inv$lump_sum)[6]/total_invest)^abs(1/investment_years)-1,4)*100
#annualised_return = round((prod(1+which_port$returns))^(1/investment_years)-1,4)*100
#annualised_return =round(Return.annualized(which_port, scale = NA, geometric = TRUE),4)*100
ggplot()+ geom_line(data = df_inv, aes(x=Date, y = exp_returns, color =paste0("Average dollar: ", avg_gain)))+
geom_line(data = df_inv, aes(x=Date, y = lump_sum, color = paste0("Lump sum: ", ls_gain)))+theme_bw()+
geom_line(data = df_inv, aes(x=Date, y = SPY, color = paste0("SPY Lump sum: ", mkt_ls_gain)))+
# geom_line(data = df_etf, aes(x=Date, y = investments, color = paste0("investment AVD")), linetype="dashed")+
labs(x= "Date", y = "Money return", color = "Strategies and gains:") +
ggtitle(paste0("Lump sum vs average dollar strategies: ", round(investment_years,0), " years, and ", months, " months. Total invest ", total_invest, ", anualised return ", annualised_return,"%"))+
theme(legend.position = "top")
which_port
# this gives the same yearly return
annualised_return = round((tail(df_inv$lump_sum)[6]/total_invest)^abs(1/investment_years)-1,4)*100
annualised_return
print(opt_weights)
# check some performance metrics
charts.PerformanceSummary(merge(etf_port,etf_port_pre,SPY))
charts.RollingPerformance(merge(etf_port,etf_port_pre,SPY ),  legend.loc = "topleft")
0.3*0.0022+0.3*0.0007 + 0.22*0.0030 +0.08*0.0018+0.05*0.003+0.05*0.0022
(0.3*0.0022+0.3*0.0007 + 0.22*0.0030 +0.08*0.0018+0.05*0.003+0.05*0.0022)*100
0.3*0.0022+0.3*0.0007 + 0.22*0.0030 +0.08*0.0018+0.05*0.003+0.05*0.0022
0.0007*100
0.0022*100
0.3*0.0022+0.3*0.0007 + 0.22*0.0030 +0.08*0.0018+0.05*0.003+0.05*0.0025
Ticks <- c("SXR8.DE",  "IUSQ.DE", "ZPRV.DE", "IS3N.DE", "IS3S.DE", "ZPRX.DE")#, "EURUSD=X")#, "EUNL.DE")#, "VWCE.DE" "IS3S.DE")
since = "2019-08-01"
SPY <- ROC(Ad(to.monthly(getSymbols("^GSPC", auto.assign = F, from = since))), type = "discrete" )
SPY[is.na(SPY)] <- 0
colnames(SPY) <- "SPY"
#SPY%>%fortify.zoo()%>%mutate(Index = yearmonth(Index))%>%as_tsibble()%>%gg_season()
#create a new environement
e <- new.env()
getSymbols(Ticks, env = e, from = since)
#create  monthly series
monthly <- eapply(e, function(x)to.monthly(x, name = names(x)))
port <- do.call(merge, lapply(monthly, Ad))
colnames(port) <- gsub(".Adjusted", "", names(port))
port <- ROC(port, type = "discrete")
port[is.na(port)] <- 0
etfs <- port
etfs%>%head(10)
etfs%>%tail(3)
comp <- etfs%>%merge(SPY)
#check correlations of etfs portfolio
pairs.panels(comp%>%data.frame())
charts.PerformanceSummary(comp, main = "ETF cumulative performance")
#ts object for etfs to check seasonality
dummy_etfs <- etfs%>%fortify.zoo()
dummy_etfs$Index <- yearmonth(dummy_etfs$Index)
ts_etfs <- dummy_etfs%>%as_tsibble()
ts_etfs%>%gg_season(ZPRV.DE)
#function to get ff_data
get_us_ff_data <- function(){
temp <- tempfile()
name <- "F-F_Research_Data_5_Factors_2x3_CSV.zip"
full_url <-  paste0("https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/",name)
download.file(full_url,temp,quiet = TRUE)
US_five_Factors <- read_csv(unz(temp, "F-F_Research_Data_5_Factors_2x3.csv"), skip = 2)%>%rename(Date = `...1`) %>%
mutate_at(vars(-Date), as.numeric)%>%suppressWarnings()
write.csv(US_five_Factors, file = "F-F_Research_Data_5_Factors_2x3.csv", row.names = F)
file.remove(temp)
return(US_five_Factors)
}
us_five_Factors <- get_us_ff_data()
get_eu_ff_data <- function(){
temp <- tempfile()
name <- "Europe_5_Factors_CSV.zip"
full_url <-  paste0("https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/",name)
download.file(full_url,temp,quiet = TRUE)
EU_five_Factors <- read_csv(unz(temp, "Europe_5_Factors.csv"), skip = 3)%>%rename(Date = 1) %>%
mutate_at(vars(-Date), as.numeric)%>%suppressWarnings()
write.csv(EU_five_Factors, file = "Europe_5_Factors.csv", row.names = F)
file.remove(temp)
return(EU_five_Factors)
}
eu_five_Factors <- get_eu_ff_data()
get_dev_ff_data <- function(){
temp <- tempfile()
name <- "Developed_5_Factors_CSV.zip"
full_url <-  paste0("https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/",name)
download.file(full_url,temp,quiet = TRUE)
DEV_five_Factors <- read_csv(unz(temp, "Developed_5_Factors.csv"), skip = 3)%>%rename(Date = 1) %>%
mutate_at(vars(-Date), as.numeric)%>%suppressWarnings()
write.csv(DEV_five_Factors, file = "Developed_5_Factors.csv", row.names = F)
file.remove(temp)
return(DEV_five_Factors)
}
dev_five_Factors <- get_dev_ff_data()
us_five_Factors%>% mutate(Date = as.yearmon(as.character(us_five_Factors$Date), "%Y%m"))%>%
mutate(`us_Mkt-RF`=`Mkt-RF`/100,   us_SMB=SMB/100,  us_HML=HML/100, us_RMW=RMW/100,  us_CMA=CMA/100, us_RF=RF/100)%>%
select(Date,`us_Mkt-RF`, us_SMB, us_HML, us_RMW, us_CMA, us_RF)-> us_fama_french_factors
eu_five_Factors%>% mutate(Date = as.yearmon(as.character(eu_five_Factors$Date), "%Y%m"))%>%
mutate(`eu_Mkt-RF`=`Mkt-RF`/100,   eu_SMB=SMB/100,  eu_HML=HML/100, eu_RMW=RMW/100,  eu_CMA=CMA/100, eu_RF=RF/100)%>%
select(Date,`eu_Mkt-RF`, eu_SMB, eu_HML, eu_RMW, eu_CMA, eu_RF)-> eu_fama_french_factors
dev_five_Factors%>% mutate(Date = as.yearmon(as.character(dev_five_Factors$Date), "%Y%m"))%>%
mutate(`dev_Mkt-RF`=`Mkt-RF`/100,   dev_SMB=SMB/100,  dev_HML=HML/100, dev_RMW=RMW/100,  dev_CMA=CMA/100, dev_RF=RF/100)%>%
select(Date,`dev_Mkt-RF`, dev_SMB, dev_HML, dev_RMW, dev_CMA, dev_RF)-> dev_fama_french_factors
us_fama_french_factors%>%drop_na()%>%tail(5)
eu_fama_french_factors%>%drop_na()%>%tail(5)
dev_fama_french_factors%>%drop_na()%>%tail(5)
#create dataframe of etfs
df_full_etfs <- etfs%>%fortify.zoo %>%data.frame()
colnames(df_full_etfs) <- c("Date",colnames(etfs))
#merge etfs with fama french factors to run regressions
all_etfs_joined <- merge(x=df_full_etfs, y=us_fama_french_factors,  on = 'Date', all.x= F)#%>%merge(joined_data, on = "Date")
all_etfs_joined <- merge(x=all_etfs_joined, y=eu_fama_french_factors,  on = 'Date', all.x= F)
all_etfs_joined <- merge(x=all_etfs_joined, y=dev_fama_french_factors,  on = 'Date', all.x= F)
factors <- merge(x = us_fama_french_factors, y = eu_fama_french_factors,  on = 'Date', all.x= F)%>%drop_na()%>%as.xts()
#factors <- merge(x = factors, y = dev_fama_french_factors,  on = 'Date', all.x= F)
#class(factors_xts)
#charts.PerformanceSummary(factors)
#pairs.panels(factors%>%as.data.frame())
n=ncol(port)
#us <- colnames(port%>%as.data.frame()%>%select(- "ZPRX.DE"))
#make a loop that fits each Etf with ff5factor and store the factors and std in lists
coeff <- c()
std <- c()
for (i in 1:n){
sum <- summary(lm(all_etfs_joined[,colnames(port)[i]]-us_RF ~ `us_Mkt-RF` + us_SMB + us_HML+ us_RMW + us_CMA  , data = all_etfs_joined))
if (colnames(port)[i] == "ZPRX.DE")
{
sum <- summary(lm(all_etfs_joined[,colnames(port)[i]]-eu_RF ~ `eu_Mkt-RF` + eu_SMB + eu_HML+ eu_RMW + eu_CMA  , data = all_etfs_joined))
}
coeff[[i]] <- c(sum$coefficients[,1])
std[[i]] <- c(sum$coefficients[,2])
}
#extract coefficients and stds and create df to be plotted later.
coeff_list <- lapply(1:length(coeff), function(x) as.numeric(coeff[[x]]))
std_list <-  lapply(1:length(std), function(x) as.numeric(std[[x]]))
coef_df <- sapply(coeff, as.numeric)%>%data.frame()
colnames(coef_df) <- colnames(port)
coef_df$Coefficients <-c("Intercept","Mkt-RF", "SMB","HML","RMW","CMA")
std_df <- sapply(std, as.numeric)%>%data.frame()
colnames(std_df) <- colnames(port)
std_df$Coefficients <-c("Intercept","Mkt-RF", "SMB","HML","RMW","CMA")
coef_df
coef_melted_data <- coef_df%>%pivot_longer(!Coefficients,names_to = "Ticker",values_to = "Values")
std_melted_data <- std_df%>%pivot_longer(!Coefficients,names_to = "Ticker",values_to = "Std")
merged_data <- merge(coef_melted_data, std_melted_data, on = c("Ticker", "Coefficients"))
ggplot(merged_data, aes(x = Coefficients , y = Values, color = Ticker)) + geom_point(size=5) +
ggtitle("Fama French 3 factor coefficients. ZPRX is with European data.") + ylab("Values")+
geom_errorbar(aes(x = Coefficients ,ymin=Values-Std, ymax=Values+Std, color = Ticker), width=0.2)
#transpose the dataframe except for the first row (intercept alpha) and last column (n+1)
coef_df_t <- coef_df[-1,-(n+1)]%>%t()
colnames(coef_df_t) <- coef_df[-1,]$Coefficients
coef_df_t
coef_matrix <- coef_df_t[,-c(4,5)]%>%as.matrix()#%>%unname()
#the betas we are after to fit
betas = coef_matrix
betas
lower <- c(0.5, 0.15, 0.15)
upper <- c(0.7, 0.6, 0.5)
#' Create portfolio object
pspec <- portfolio.spec(assets=Ticks)
pspec <- add.constraint(portfolio=pspec, type="long_only")
pspec$assets
#' Leverage constraint. Sum of weights is one
lev_constr <- weight_sum_constraint(min_sum=0.99, max_sum=1.01)
#' Box constraint, min and max weights
lo_constr <- box_constraint(assets=pspec$assets, min=c(0.05, 0.05, 0.05, 0.1, 0.2, 0.2), max= c(0.1,0.15, 0.1, 0.25, 0.4, 0.4))
# Fama-French factor exposure constraint
exp_constr <- factor_exposure_constraint(assets=Ticks, B=betas, lower=lower, upper=upper)
#' Objective to minimize variance.
var_obj <- portfolio_risk_objective(name="var")
#std_obj <- portfolio_risk_objective(name="std")
pl_constr <- position_limit_constraint(assets=pspec$assets, min_pos=4)
#' Objective to maximize return.
ret_obj <- return_objective(name="mean")
#' Objective to minimize expected tail loss ETL.
etl_obj <- portfolio_risk_objective(name="ETL")
optb <- optimize.portfolio(R=etfs, portfolio=pspec,
constraints=list(lev_constr,lo_constr, exp_constr,pl_constr),
objectives=list(var_obj, ret_obj),  maxSR =T, maxSTARR=TRUE,#this we can decide to include or not.
optimize_method="DEoptim", search_size = 30000, maxiter=100000)
#optimal weights from optb
opt_weights <- round(optb$weights,2)
print(opt_weights)
sum(opt_weights)
#manually add weights
#etf_weights <- c(0.0281, 0.144, 0.288, 0.111, 0.428)
#etf_weights <- c(0.085, 0.112, 0.11, 0.40, 0.295)
#etf_value_weights <- c(0.085, 0.11, 0.40, 0.295)
etf_weights <- c(0.05, 0.08, 0.05, 0.22, 0.3, 0.3)
sum(etf_weights)
#create the portfolio returns based on optimal weights
etf_port <- reclass(coredata(etfs)%*%opt_weights, match.to = etfs)
colnames(etf_port) <- "opt_returns"
df_etf <- etf_port%>%fortify.zoo %>%data.frame()
colnames(df_etf) <- c("Date","opt_returns")
#create the portfolio returns based on manual weights
etf_port_pre <- reclass(coredata(etfs)%*%etf_weights, match.to = etfs)
colnames(etf_port_pre) <- "man_returns"
#manually weighted df returns
df_etf_stand <- etf_port_pre%>%fortify.zoo %>%data.frame()
colnames(df_etf_stand) <- c("Date","man_returns")
# merging all returns (optimized, manual) and etfs with fama frenc factors for portfolio regression
port_ret_factors <- merge(x=all_etfs_joined, y=c(df_etf, df_etf_stand), on = 'Date', all.x= F)
#port_ret_factors
# check some performance metrics
charts.PerformanceSummary(merge(etf_port,etf_port_pre,SPY))
charts.RollingPerformance(merge(etf_port,etf_port_pre,SPY ),  legend.loc = "topleft")
# run a regression for the 3 factors on either the optimized weights returns or manual weights returns
us_factor_model <- lm(man_returns-us_RF ~ `us_Mkt-RF` + us_SMB + us_HML, data = port_ret_factors)
summary(us_factor_model)
eu_factor_model <- lm(ZPRX.DE-eu_RF ~ `eu_Mkt-RF` + eu_SMB + eu_HML + eu_CMA + eu_RMW, data = port_ret_factors)
summary(eu_factor_model)
dev_factor_model <- lm(man_returns-dev_RF ~ `dev_Mkt-RF` + dev_SMB + dev_HML, data = port_ret_factors)
summary(dev_factor_model)
source("~/general_programming/portfolio/interactive_graph_portfolio_daily.R", echo=TRUE)
